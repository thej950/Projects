pipeline{
    agent any
    
     environment {
        APP_NAME = "myapp"
        ECR_REGISTRY = "115498080659.dkr.ecr.us-east-1.amazonaws.com"
        ECR_REPOSITORY = "thej"
        IMAGE_NAME = "${APP_NAME}"
        BUILD_VERSION = getVersion()
    }
    

    stages{
        stage("Clear Workspace"){
            steps{
                cleanWs()
            }
        }
        stage("Download Code"){
            steps{
                git 'https://github.com/thej950/project-1.git'
            }
        }
        stage("Test Application"){
            steps{
                    sh 'mvn test'
            }
        }
        stage("Build Application Code"){
            steps{
                sh 'mvn package'
            }
        }
        stage("Build Docker image"){
            steps{
                 sh "docker build -t $APP_NAME:$BUILD_VERSION ."
            }
        }
        stage("Push Docker image To ECR"){
            steps{
                script{
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    sh "docker tag $APP_NAME:$BUILD_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION"
                    sh "docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION"
                }
            }
        }
        stage("Clear Docker images locally") {
            steps{
                sh 'docker system prune -af'
            }
        }
        stage("Deploying ECR image") {
            steps { 
                script{ 
                    sh "ssh ubuntu@54.234.168.231 aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    sh "ssh ubuntu@54.234.168.231 docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION"
                }
            }
        }
        stage("stop previuos containers") {
            steps{
                script{ 
                    sh 'ssh ubuntu@54.234.168.231 docker rm -f myappcontainer'
                }
            }
        }
        stage("Run Docker image") {
            steps{
                sh "ssh ubuntu@54.234.168.231 docker run --name myappcontainer -d -p 9090:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_VERSION"
            }
        }
    }
    post {
        success {
            mail bcc: '', body: 'ci-cd gets success', cc: '', from: '', replyTo: '', subject: 'Pojects completed successfully', to: 'goudc423@gmail.com'
            echo "Project completed Successfully"
        }
        failure {
            mail bcc: '', body: 'failed ci-cd', cc: '', from: '', replyTo: '', subject: 'Pojects Failed', to: 'goudc423@gmail.com'
            echo "Project Failed"
        }
    }
}
def getVersion() {
    def buildNumber = env.BUILD_NUMBER ?: '0'
    return "1.0.${buildNumber}"
}

